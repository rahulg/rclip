#!/usr/bin/env python3

import argparse
import binascii
import getpass
import hmac
import logging
import os
import socket
import struct
import subprocess
import sys
import time

from enum import Enum
from pathlib import Path

DEFAULT_PORT = 9110
TIME_DRIFT_ALLOWANCE = 2

MAX_MSG_LEN = 2**16 - 1
try:
    XDG_CONFIG_HOME = Path(os.environ['XDG_CONFIG_HOME'])
except KeyError:
    XDG_CONFIG_HOME = Path.home() / '.config'
CONFIG_DIR = XDG_CONFIG_HOME / 'rclip'
SECRET_FILE = CONFIG_DIR / 'secret'
SECRET_SIZE = 32

logging.basicConfig(
    level=os.environ.get('LOGLEVEL', 'WARNING'),
    style='{',
    format='[{asctime}] {levelname}: {message}',
)


def opoo(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class MessageTooLargeError(Exception):
    pass


class AuthenticationError(Exception):
    pass


class CopyFailedError(Exception):
    pass


class RClipProtocolError(Exception):
    pass


class OpCode(Enum):
    Ping = 1
    CopyRequest = 2
    PasteRequest = 3
    ClipboardContents = 4
    EndOfClipboard = 5
    Ack = 6
    Nak = 7


class Message(object):
    header_fmt = '!3siBH'
    preamble = b'RCL'
    hmac_digest = 'sha256'

    def __init__(
        self,
        secret: bytes,
        sock: socket.socket,
        opcode: OpCode,
        data: bytearray = bytearray(),
    ) -> None:
        self.secret = secret
        self.sock = sock
        self.opcode = opcode
        self.data = data

    def __repr__(self):
        return '<Message {} {}>'.format(self.opcode, len(self.data))

    def send(self):
        if len(self.data) > MAX_MSG_LEN:
            raise MessageTooLargeError

        _hmac = hmac.new(self.secret, digestmod=Message.hmac_digest)

        hdr_data = struct.pack(
            Message.header_fmt,
            Message.preamble,
            int(time.time()),
            self.opcode.value,
            len(self.data),
        )
        _hmac.update(hdr_data)
        self.sock.sendall(hdr_data)
        logging.debug('SENDHEDR %s %s', self.opcode, len(self.data))

        _hmac.update(self.data)
        self.sock.sendall(self.data)
        logging.debug('SENDDATA %s', self.data)

        dgst = _hmac.digest()
        self.sock.sendall(dgst)
        logging.debug('SENDHMAC %s', binascii.hexlify(dgst))

    @staticmethod
    def recv(secret: bytes, sock: socket.socket) -> 'Message':
        _hmac = hmac.new(secret, digestmod=Message.hmac_digest)

        buf = sock.recv(struct.calcsize(Message.header_fmt))
        if len(buf) < struct.calcsize(Message.header_fmt):
            raise RClipProtocolError

        _hmac.update(buf)
        preamble, timestamp, opcode, length = struct.unpack(
            Message.header_fmt, buf
        )
        if preamble != Message.preamble:
            raise RClipProtocolError
        if abs(time.time() - timestamp) > TIME_DRIFT_ALLOWANCE:
            raise AuthenticationError

        msg = Message(secret, sock, OpCode(opcode))
        logging.debug('RECVHEDR %s %s', OpCode(opcode), length)
        msg.data = bytearray()
        bcount = length
        while bcount > 0:
            buf = sock.recv(min(bcount, MAX_MSG_LEN))
            if len(buf) == 0:
                raise RClipProtocolError
            _hmac.update(buf)
            msg.data.extend(buf)
            bcount -= len(buf)
        logging.debug('RECVDATA %s', msg.data)

        msg_dgst = bytearray()
        bcount = 32
        while bcount > 0:
            buf = sock.recv(min(bcount, 32))
            if len(buf) == 0:
                raise RClipProtocolError
            msg_dgst.extend(buf)
            bcount -= len(buf)

        logging.debug('RECVHMAC %s', binascii.hexlify(msg_dgst))
        if not hmac.compare_digest(_hmac.digest(), msg_dgst):
            raise AuthenticationError

        return msg


def reusable_tcp_socket() -> socket.socket:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    try:
        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_FASTOPEN, 1)
    except OSError:
        pass
    return sock


def format_addr(addr):
    return ':'.join(map(str, addr))


class RClipServer(object):
    def __init__(self, secret: bytes, host: str, port: int) -> None:
        self.secret = secret
        self.sock = reusable_tcp_socket()
        self.sock.bind((host, port))
        self.sock.listen(8)

    def listen_loop(self):
        while True:
            try:
                sock, addr = self.sock.accept()
            except KeyboardInterrupt:
                # XXX: there has to be a better way
                break

            try:
                msg = Message.recv(self.secret, sock)

                if msg.opcode == OpCode.Ping:
                    Message(self.secret, sock, OpCode.Ping).send()
                elif msg.opcode == OpCode.CopyRequest:
                    logging.info('COPY from %s', format_addr(addr))
                    self.copy(sock)
                elif msg.opcode == OpCode.PasteRequest:
                    logging.info('PASTE to %s', format_addr(addr))
                    self.paste(sock)
            except BrokenPipeError:
                sock.close()
            except AuthenticationError:
                logging.warning('AuthenticationError: %s', format_addr(addr))
                sock.close()
            except RClipProtocolError:
                sock.close()

    def copy(self, sock: socket.socket):
        pbcopy = subprocess.Popen(['pbcopy'], stdin=subprocess.PIPE)
        try:
            msg = Message.recv(self.secret, sock)
            while msg.opcode == OpCode.ClipboardContents:
                pbcopy.stdin.write(msg.data)
                msg = Message.recv(self.secret, sock)

            if msg.opcode != OpCode.EndOfClipboard:
                raise RClipProtocolError

        except RClipProtocolError:
            pbcopy.kill()
        pbcopy.communicate()
        rc = pbcopy.wait(timeout=5)
        if rc == 0:
            opcode = OpCode.Ack
        else:
            opcode = OpCode.Nak
        Message(self.secret, sock, opcode).send()

    def paste(self, sock: socket.socket):
        pbpaste = subprocess.Popen(['pbpaste'], stdout=subprocess.PIPE)
        buf = pbpaste.stdout.read(MAX_MSG_LEN)
        while len(buf) > 0:
            Message(self.secret, sock, OpCode.ClipboardContents, buf).send()
            buf = pbpaste.stdout.read(MAX_MSG_LEN)
        Message(self.secret, sock, OpCode.EndOfClipboard).send()
        msg = Message.recv(self.secret, sock)
        if msg.opcode == OpCode.Ack:
            pass
        elif msg.opcode == OpCode.Nak:
            pass
        else:
            raise RClipProtocolError


class RClipClient(object):
    def __init__(self, secret: bytes, host: str, port: int) -> None:
        self.secret = secret
        self.sock = reusable_tcp_socket()
        self.sock.connect((host, port))

    def paste(self):
        Message(self.secret, self.sock, OpCode.PasteRequest).send()
        msg = Message.recv(self.secret, self.sock)
        while msg.opcode == OpCode.ClipboardContents:
            sys.stdout.buffer.write(msg.data)
            msg = Message.recv(self.secret, self.sock)
        Message(self.secret, self.sock, OpCode.Ack).send()

    def copy(self):
        Message(self.secret, self.sock, OpCode.CopyRequest).send()
        buf = sys.stdin.buffer.read(MAX_MSG_LEN)
        while len(buf) > 0:
            Message(self.secret, self.sock, OpCode.ClipboardContents,
                    buf).send()
            buf = sys.stdin.buffer.read(MAX_MSG_LEN)
        Message(self.secret, self.sock, OpCode.EndOfClipboard).send()
        msg = Message.recv(self.secret, self.sock)
        if msg.opcode == OpCode.Ack:
            pass
        elif msg.opcode == OpCode.Nak:
            raise CopyFailedError
        else:
            raise RClipProtocolError


def main():
    parser = argparse.ArgumentParser(prog='rclip')
    parser.add_argument('--port', '-p', type=int, default=DEFAULT_PORT, help='TCP port number used by rclip')
    commands = parser.add_subparsers(help='commands')

    copy = commands.add_parser('copy', help='copy to remote clipboard')
    copy.set_defaults(func=copy_cmd)

    paste = commands.add_parser('paste', help='paste from remote clipboard')
    paste.set_defaults(func=paste_cmd)

    server = commands.add_parser('server', help='run server')
    server.set_defaults(func=server_cmd)

    gen_secret = commands.add_parser('generate-secret', help='generate shared secret')
    gen_secret.set_defaults(func=gen_secret_cmd)

    set_secret = commands.add_parser('set-secret', help='set shared secret')
    set_secret.set_defaults(func=set_secret_cmd)

    get_secret = commands.add_parser('get-secret', help='print shared secret')
    get_secret.set_defaults(func=get_secret_cmd)

    args = parser.parse_args()
    rc = args.func(args)
    sys.exit(rc)


def gen_secret_cmd(args: argparse.Namespace) -> int:
    secret = os.urandom(SECRET_SIZE)
    try:
        set_secret(secret)
        return 0
    except Exception as e:
        opoo(e)
        return 1


def set_secret_cmd(args: argparse.Namespace) -> int:
    hexsecret = getpass.getpass('secret: ')
    if len(hexsecret) != SECRET_SIZE * 2:
        opoo('secret should be 32 bytes')
        return 1
    try:
        secret = binascii.unhexlify(hexsecret)
    except binascii.Error:
        opoo(
            'secret format error, expected 32 bytes in hexadecimal format'
        )
        return 1

    try:
        set_secret(secret)
        return 0
    except Exception as e:
        opoo(e)
        return 1


def set_secret(secret: bytes):
    CONFIG_DIR.mkdir(0o700, parents=True, exist_ok=True)
    with SECRET_FILE.open('wb') as sf:
        sf.write(binascii.hexlify(secret))
    opoo('secret written to', SECRET_FILE)


def get_secret() -> bytes:
    if not SECRET_FILE.exists():
        opoo(
            'shared secret does not exist.'
            'run `rclip generate-secret` to generate or `rclip set-secret` to use an existing one'
        )
        raise AssertionError

    secret = binascii.unhexlify(SECRET_FILE.read_text().strip())
    return secret


def get_secret_cmd(args: argparse.Namespace) -> int:
    try:
        secret = get_secret()
        print(binascii.hexlify(secret).decode('ascii'))
        return 0
    except AssertionError:
        return 1


def server_cmd(args: argparse.Namespace) -> int:
    try:
        secret = get_secret()
        server = RClipServer(secret, '127.0.0.1', args.port)
        server.listen_loop()
        return 0
    except Exception as e:
        opoo(e)
        return 1


def copy_cmd(args: argparse.Namespace) -> int:
    try:
        secret = get_secret()
        client = RClipClient(secret, '127.0.0.1', args.port)
    except socket.error:
        opoo('connection failed')
        return 1
    try:
        client.copy()
    except CopyFailedError:
        opoo('server error occurred while copying')
        return 1
    except RClipProtocolError:
        opoo('protocol error occurred while copying')
        return 1
    except socket.error as e:
        opoo('error occurred while copying', e)
        return 1
    return 0


def paste_cmd(args: argparse.Namespace) -> int:
    try:
        secret = get_secret()
        client = RClipClient(secret, '127.0.0.1', args.port)
    except socket.error:
        opoo('connection failed')
        return 1
    try:
        client.paste()
    except RClipProtocolError:
        opoo('protocol error occurred while pasting')
        return 1
    except socket.error as e:
        opoo('error occurred while pasting', e)
        return 1

    return 0


if __name__ == '__main__':
    main()
